"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getToken = exports.getData = exports.tokenKinds = void 0;
const util_1 = require("util");
const crypto_1 = __importDefault(require("crypto"));
const server_1 = __importDefault(require("../config/server"));
const randomBytes = util_1.promisify(crypto_1.default.randomBytes);
const tokenKey = Buffer.from(server_1.default.tokenKey, 'base64');
var tokenKinds;
(function (tokenKinds) {
    tokenKinds[tokenKinds["auth"] = 0] = "auth";
    tokenKinds[tokenKinds["team"] = 1] = "team";
    tokenKinds[tokenKinds["verify"] = 2] = "verify";
    tokenKinds[tokenKinds["ctftimeAuth"] = 4] = "ctftimeAuth";
})(tokenKinds = exports.tokenKinds || (exports.tokenKinds = {}));
const tokenExpiries = {
    [tokenKinds.auth]: Infinity,
    [tokenKinds.team]: Infinity,
    [tokenKinds.verify]: server_1.default.loginTimeout,
    [tokenKinds.ctftimeAuth]: server_1.default.loginTimeout
};
const timeNow = () => Math.floor(Date.now() / 1000);
const encryptToken = async (content) => {
    const iv = await randomBytes(12);
    const cipher = crypto_1.default.createCipheriv('aes-256-gcm', tokenKey, iv);
    const cipherText = cipher.update(JSON.stringify(content));
    cipher.final();
    const tokenContent = Buffer.concat([iv, cipherText, cipher.getAuthTag()]);
    return tokenContent.toString('base64');
};
const decryptToken = async (token) => {
    try {
        const tokenContent = Buffer.from(token, 'base64');
        const iv = tokenContent.slice(0, 12);
        const authTag = tokenContent.slice(tokenContent.length - 16);
        const cipher = crypto_1.default.createDecipheriv('aes-256-gcm', tokenKey, iv);
        cipher.setAuthTag(authTag);
        const plainText = cipher.update(tokenContent.slice(12, tokenContent.length - 16));
        cipher.final();
        return JSON.parse(plainText.toString());
    }
    catch (e) {
        return null;
    }
};
exports.getData = async (expectedTokenKind, token) => {
    const content = await decryptToken(token);
    if (content === null) {
        return null;
    }
    const { k: kind, t: createdAt, d: data } = content;
    if (kind !== expectedTokenKind) {
        return null;
    }
    if (createdAt + tokenExpiries[kind] < timeNow()) {
        return null;
    }
    return data;
};
exports.getToken = async (tokenKind, data) => {
    const token = await encryptToken({
        k: tokenKind,
        t: timeNow(),
        d: data
    });
    return token;
};
//# sourceMappingURL=data:application/json;base64,