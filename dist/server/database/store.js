"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buyItem = exports.addChips = exports.upsertItem = exports.removeItemById = exports.equipPurchase = exports.getEquippedItemByType = exports.getEquippedItems = exports.getItemIdsByUserId = exports.newItem = exports.getItemById = exports.getAllItems = void 0;
const db_1 = __importDefault(require("./db"));
exports.getAllItems = () => {
    return db_1.default
        .query('SELECT * FROM items ORDER BY id ASC')
        .then((res) => res.rows);
};
exports.getItemById = ({ id }) => {
    return db_1.default
        .query('SELECT * FROM items WHERE id = $1', [id])
        .then((res) => res.rows[0]);
};
exports.newItem = ({ name, description, type, price }) => {
    return db_1.default
        .query('INSERT INTO items (name, description, type, price) VALUES ($1, $2, $3, $4) RETURNING *', [name, description, type, price])
        .then((res) => res.rows[0]);
};
exports.getItemIdsByUserId = ({ userid }) => {
    return db_1.default
        .query('SELECT itemid FROM purchases WHERE userid = $1', [userid])
        .then((res) => res.rows.map(e => e.itemid));
};
// TODO only return relavent info
exports.getEquippedItems = ({ userid }) => {
    return db_1.default
        .query('SELECT * FROM items WHERE id IN (SELECT itemid FROM purchases WHERE userid = $1 AND equipped = true)', [userid])
        .then((res) => {
        let map = {};
        for (const item of res.rows) {
            map[item.type] = item;
        }
        return map;
    });
};
exports.getEquippedItemByType = ({ type, userid }) => {
    return db_1.default
        .query('SELECT * FROM items WHERE id = (SELECT itemid FROM purchases WHERE equipped = true AND userid = $1 AND type = $2)', [userid, type])
        .then((res) => res.rows[0]);
};
exports.equipPurchase = async ({ itemid, userid }) => {
    // unequip all other items
    await db_1.default.query('UPDATE purchases SET equipped = false WHERE userid = $1 AND type = (SELECT type FROM items WHERE id = $2) AND itemid != $2', [userid, itemid]);
    return db_1.default
        .query('UPDATE purchases SET equipped = NOT equipped WHERE userid = $1 AND itemid = $2 RETURNING *', [userid, itemid])
        .then((res) => res.rows[0]);
};
exports.removeItemById = ({ id }) => {
    return db_1.default
        .query('DELETE FROM items WHERE id = $1 RETURNING *', [id])
        .then((res) => res.rows[0]);
};
exports.upsertItem = async ({ id, type, price, name, description, resourceUrl, resourceName }) => {
    await db_1.default.query(`INSERT INTO items VALUES($1, $2, $3, $4::item_type, $5, $6, $7)
      ON CONFLICT (id)
      DO UPDATE SET 
        name = $2,
        description = $3,
        type = $4,
        price = $5,
        "resourceUrl" = $6,
        "resourceName" = $7
    `, [id, name, description, type, price, resourceUrl, resourceName]);
};
exports.addChips = (id, chips) => {
    return db_1.default
        .query('UPDATE users SET chips = chips + $1 WHERE id = $2', [
        chips,
        id
    ])
        .then((res) => res.rows[0]);
};
exports.buyItem = async (userid, item) => {
    const purchase = await db_1.default
        .query('INSERT INTO purchases (type, itemid, userid) VALUES ($1, $2, $3) RETURNING *', [item.type, item.id, userid])
        .then((res) => res.rows[0]);
    // is this, timing attack?
    await exports.addChips(userid, -item.price);
    return purchase;
};
//# sourceMappingURL=data:application/json;base64,