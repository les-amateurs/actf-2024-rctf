"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateUser = exports.removeEmail = exports.removeCtftimeId = exports.makeUser = exports.removeUserById = exports.removeUserByEmail = exports.getUserByNameOrCtftimeId = exports.getUserByNameOrEmail = exports.getUserByIdAndEmail = exports.getUserByCtftimeId = exports.getUserByEmail = exports.getUserById = exports.getAllUsers = void 0;
const db_1 = __importDefault(require("./db"));
const util = __importStar(require("../util"));
const server_1 = __importDefault(require("../config/server"));
const errors_1 = require("../errors");
exports.getAllUsers = () => {
    return db_1.default.query('SELECT id, name, division FROM users')
        .then(res => res.rows);
};
exports.getUserById = ({ id }) => {
    return db_1.default.query('SELECT * FROM users WHERE id = $1', [id])
        .then(res => res.rows[0]);
};
exports.getUserByEmail = ({ email }) => {
    return db_1.default.query('SELECT * FROM users WHERE email = $1', [email])
        .then(res => res.rows[0]);
};
exports.getUserByCtftimeId = ({ ctftimeId }) => {
    return db_1.default.query('SELECT * FROM users WHERE ctftime_id = $1', [ctftimeId])
        .then(res => res.rows[0]);
};
exports.getUserByIdAndEmail = ({ id, email }) => {
    return db_1.default.query('SELECT * FROM users WHERE id = $1 AND email = $2', [id, email])
        .then(res => res.rows[0]);
};
exports.getUserByNameOrEmail = ({ name, email }) => {
    return db_1.default.query('SELECT * FROM users WHERE name = $1 OR email = $2', [name, email])
        .then(res => res.rows[0]);
};
exports.getUserByNameOrCtftimeId = ({ name, ctftimeId }) => {
    return db_1.default.query('SELECT * FROM users WHERE name = $1 OR ctftime_id = $2', [name, ctftimeId])
        .then(res => res.rows[0]);
};
exports.removeUserByEmail = ({ email }) => {
    return db_1.default.query('DELETE FROM users WHERE email = $1 RETURNING *', [email])
        .then(res => res.rows[0]);
};
exports.removeUserById = ({ id }) => {
    return db_1.default.query('DELETE FROM users WHERE id = $1 RETURNING *', [id])
        .then(res => res.rows[0]);
};
exports.makeUser = ({ id, name, email, division, ctftimeId, perms }) => {
    if (server_1.default.email && server_1.default.divisionACLs && !util.restrict.divisionAllowed(email, division)) {
        throw new errors_1.DivisionACLError();
    }
    return db_1.default.query('INSERT INTO users (id, name, email, division, ctftime_id, perms) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *', [id, name, email, division, ctftimeId, perms])
        .then(res => res.rows[0]);
};
exports.removeCtftimeId = ({ id }) => {
    return db_1.default.query('UPDATE users SET ctftime_id = NULL WHERE id = $1 AND ctftime_id IS NOT NULL RETURNING *', [id])
        .then(res => res.rows[0]);
};
exports.removeEmail = ({ id }) => {
    return db_1.default.query('UPDATE users SET email = NULL WHERE id = $1 AND email IS NOT NULL RETURNING *', [id])
        .then(res => res.rows[0]);
};
exports.updateUser = async ({ id, name, email, division, ctftimeId, perms }) => {
    if (server_1.default.email && server_1.default.divisionACLs) {
        if (!email || !division) {
            const user = await exports.getUserById({ id });
            if (user === undefined) {
                // User does not exist, bail
                return undefined;
            }
            email = email || user.email;
            division = division || user.division;
        }
        if (!util.restrict.divisionAllowed(email, division)) {
            throw new errors_1.DivisionACLError();
        }
    }
    return db_1.default.query(`
      UPDATE users SET
        name = COALESCE($1, name),
        email = COALESCE($2, email),
        division = COALESCE($3, division),
        ctftime_id = COALESCE($4, ctftime_id),
        perms = COALESCE($5, perms)
      WHERE id = $6 RETURNING *
      `, [name, email, division, ctftimeId, perms, id])
        .then(res => res.rows[0]);
};
//# sourceMappingURL=data:application/json;base64,