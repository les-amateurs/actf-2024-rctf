"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const yaml_1 = __importDefault(require("yaml"));
const deepmerge_1 = __importDefault(require("deepmerge"));
const util_1 = require("./util");
const jsonLoader = (file) => JSON.parse(file);
const yamlLoader = (file) => yaml_1.default.parse(file);
const fileConfigLoaders = new Map([
    ['json', jsonLoader],
    ['yaml', yamlLoader],
    ['yml', yamlLoader]
]);
const configPath = (_a = process.env.RCTF_CONF_PATH) !== null && _a !== void 0 ? _a : path_1.default.join(__dirname, '../../../conf.d');
const fileConfigs = [];
fs_1.default.readdirSync(configPath).sort().forEach((name) => {
    const matched = /\.(.+)$/.exec(name);
    if (matched === null) {
        return;
    }
    const loader = fileConfigLoaders.get(matched[1]);
    if (loader === undefined) {
        return;
    }
    const config = loader(fs_1.default.readFileSync(path_1.default.join(configPath, name)).toString());
    fileConfigs.push(config);
});
const envConfig = {
    database: {
        sql: (_b = process.env.RCTF_DATABASE_URL) !== null && _b !== void 0 ? _b : {
            host: process.env.RCTF_DATABASE_HOST,
            port: util_1.nullsafeParseInt(process.env.RCTF_DATABASE_PORT),
            user: process.env.RCTF_DATABASE_USERNAME,
            password: process.env.RCTF_DATABASE_PASSWORD,
            database: process.env.RCTF_DATABASE_DATABASE
        },
        redis: (_c = process.env.RCTF_REDIS_URL) !== null && _c !== void 0 ? _c : {
            host: process.env.RCTF_REDIS_HOST,
            port: util_1.nullsafeParseInt(process.env.RCTF_REDIS_PORT),
            password: process.env.RCTF_REDIS_PASSWORD,
            database: util_1.nullsafeParseInt(process.env.RCTF_REDIS_DATABASE)
        },
        migrate: process.env.RCTF_DATABASE_MIGRATE
    },
    instanceType: process.env.RCTF_INSTANCE_TYPE,
    tokenKey: process.env.RCTF_TOKEN_KEY,
    origin: process.env.RCTF_ORIGIN,
    ctftime: {
        clientId: process.env.RCTF_CTFTIME_CLIENT_ID,
        clientSecret: process.env.RCTF_CTFTIME_CLIENT_SECRET
    },
    userMembers: util_1.nullsafeParseBoolEnv(process.env.RCTF_USER_MEMBERS),
    homeContent: process.env.RCTF_HOME_CONTENT,
    ctfName: process.env.RCTF_NAME,
    meta: {
        description: process.env.RCTF_META_DESCRIPTION,
        imageUrl: process.env.RCTF_IMAGE_URL
    },
    faviconUrl: process.env.RCTF_FAVICON_URL,
    logoUrl: process.env.RCTF_LOGO_URL,
    globalSiteTag: process.env.RCTF_GLOBAL_SITE_TAG,
    email: {
        from: process.env.RCTF_EMAIL_FROM
    },
    startTime: util_1.nullsafeParseInt(process.env.RCTF_START_TIME),
    endTime: util_1.nullsafeParseInt(process.env.RCTF_END_TIME),
    recaptcha: {
        siteKey: process.env.RCTF_RECAPTCHA_SITE_KEY,
        secretKey: process.env.RCTF_RECAPTCHA_SECRET_KEY
    },
    leaderboard: {
        maxLimit: util_1.nullsafeParseInt(process.env.RCTF_LEADERBOARD_MAX_LIMIT),
        maxOffset: util_1.nullsafeParseInt(process.env.RCTF_LEADERBOARD_MAX_OFFSET),
        updateInterval: util_1.nullsafeParseInt(process.env.RCTF_LEADERBOARD_UPDATE_INTERVAL),
        graphMaxTeams: util_1.nullsafeParseInt(process.env.RCTF_LEADERBOARD_GRAPH_MAX_TEAMS),
        graphSampleTime: util_1.nullsafeParseInt(process.env.RCTF_LEADERBOARD_GRAPH_SAMPLE_TIME)
    },
    loginTimeout: util_1.nullsafeParseInt(process.env.RCTF_LOGIN_TIMEOUT),
    paranoia: {
        apiUrl: process.env.RCTF_PARANOIA_URL
    }
};
const defaultConfig = {
    database: {
        migrate: 'never'
    },
    instanceType: 'all',
    userMembers: true,
    sponsors: [],
    homeContent: '',
    faviconUrl: 'https://redpwn.storage.googleapis.com/branding/rctf-favicon.ico',
    challengeProvider: {
        name: 'challenges/database'
    },
    uploadProvider: {
        name: 'uploads/local'
    },
    storeProvider: {
        name: 'store/database'
    },
    proxy: {
        cloudflare: false,
        trust: false
    },
    meta: {
        description: '',
        imageUrl: ''
    },
    leaderboard: {
        maxLimit: 100,
        maxOffset: 4294967296,
        updateInterval: 10000,
        graphMaxTeams: 10,
        graphSampleTime: 1800000
    },
    loginTimeout: 3600000
};
const config = deepmerge_1.default.all([defaultConfig, ...fileConfigs, util_1.removeUndefined(envConfig)]);
exports.default = config;
//# sourceMappingURL=data:application/json;base64,