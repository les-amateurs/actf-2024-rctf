"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const worker_threads_1 = require("worker_threads");
const scores_1 = require("../util/scores");
const samples_1 = require("./samples");
const server_1 = __importDefault(require("../config/server"));
const { data: { solves, users, graphUpdate, allChallenges } } = worker_threads_1.workerData;
const solveAmount = new Map();
const challengeTiebreakEligibles = new Map();
for (let i = 0; i < allChallenges.length; i++) {
    const challenge = allChallenges[i];
    solveAmount.set(challenge.id, 0);
    challengeTiebreakEligibles.set(challenge.id, challenge.tiebreakEligible);
}
const userSolves = new Map();
const userTiebreakEligibleLastSolves = new Map();
const userLastSolves = new Map();
let lastIndex = 0;
const calculateScores = (sample) => {
    const challengeValues = new Map();
    const userScores = [];
    for (; lastIndex < solves.length; lastIndex++) {
        const challId = solves[lastIndex].challengeid;
        const userId = solves[lastIndex].userid;
        const createdAt = solves[lastIndex].createdat;
        if (createdAt > sample) {
            break;
        }
        const amt = solveAmount.get(challId);
        if (amt === undefined) {
            continue;
        }
        solveAmount.set(challId, amt + 1);
        userLastSolves.set(userId, createdAt);
        if (challengeTiebreakEligibles.get(challId) !== false) { // !== false because we default to true
            userTiebreakEligibleLastSolves.set(userId, createdAt);
        }
        // Store which challenges each user solved for later
        if (!userSolves.has(userId)) {
            userSolves.set(userId, [challId]);
        }
        else {
            userSolves.get(userId).push(challId);
        }
    }
    let maxSolveAmount = 0;
    for (let i = 0; i < allChallenges.length; i++) {
        const amt = solveAmount.get(allChallenges[i].id);
        if (amt > maxSolveAmount) {
            maxSolveAmount = amt;
        }
    }
    for (let i = 0; i < allChallenges.length; i++) {
        const challenge = allChallenges[i];
        challengeValues.set(challenge.id, scores_1.getScore(challenge.points.min, challenge.points.max, maxSolveAmount, solveAmount.get(challenge.id)));
    }
    for (let i = 0; i < users.length; i++) {
        const user = users[i];
        let currScore = 0;
        const lastTiebreakEligibleSolve = userTiebreakEligibleLastSolves.get(user.id);
        const lastSolve = userLastSolves.get(user.id);
        if (lastSolve === undefined)
            continue; // If the user has not solved any challenges, do not add to leaderboard
        const solvedChalls = userSolves.get(user.id);
        for (let j = 0; j < solvedChalls.length; j++) {
            // Add the score for the specific solve loaded from the challengeValues array using ids
            const value = challengeValues.get(solvedChalls[j]);
            if (value !== undefined) {
                currScore += value;
            }
        }
        userScores.push([
            user.id,
            user.name,
            user.division,
            currScore,
            lastTiebreakEligibleSolve,
            lastSolve
        ]);
    }
    return {
        challengeValues,
        userScores
    };
};
const userCompare = (a, b) => {
    var _a, _b;
    // sort the users by score
    // if two user's scores are the same, sort by last tiebreakEligible solve time
    // if neither user has any tiebreakEligible solves, sort by last solve time
    const scoreCompare = b[3] - a[3];
    if (scoreCompare !== 0) {
        return scoreCompare;
    }
    if (a[4] !== undefined || b[4] !== undefined) {
        return ((_a = a[4]) !== null && _a !== void 0 ? _a : Infinity) - ((_b = b[4]) !== null && _b !== void 0 ? _b : Infinity);
    }
    return a[5] - b[5];
};
const leaderboardUpdate = Math.min(Date.now(), server_1.default.endTime);
const samples = samples_1.calcSamples({
    start: Math.max(graphUpdate + 1, server_1.default.startTime),
    end: leaderboardUpdate
});
const graphLeaderboards = [];
samples.forEach((sample) => {
    const { userScores } = calculateScores(sample);
    graphLeaderboards.push({
        sample,
        scores: userScores.map((score) => [score[0], score[3]])
    });
});
const { userScores, challengeValues } = calculateScores(leaderboardUpdate);
const sortedUsers = userScores.sort(userCompare).map((user) => user.slice(0, 4));
worker_threads_1.parentPort.postMessage({
    leaderboard: sortedUsers,
    graphLeaderboards,
    challengeValues,
    solveAmount,
    leaderboardUpdate
});
//# sourceMappingURL=data:application/json;base64,